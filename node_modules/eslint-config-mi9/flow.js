module.exports = {
  extends: [
    require.resolve('./'),
    // Building off of: https://github.com/gajus/eslint-plugin-flowtype/blob/master/src/configs/recommended.json
    'plugin:flowtype/recommended',
  ],

  // Enable rules for flow
  plugins: [
    'flowtype',
  ],

  // https://github.com/gajus/eslint-plugin-flowtype
  rules: {
    // Doesn't work with Flow `import type`. Make sure import/no-duplicates is turned on to cover this!
    'no-duplicate-imports': 'off',

    // Require all type definitions to need a dangling comma
    'flowtype/delimiter-dangle': ['error', 'always-multiline'],

    // No duplicate keys in a type definition
    'flowtype/no-dupe-keys': 'error',

    // Disallow usage for primitive constructor types
    // Success: string, number, {}
    // Error: String, Number, Object
    'flowtype/no-primitive-constructor-types': 'error',

    // Warn for all weakly types
    // Success: type Cool = { value: string };
    // Warning: type Cool = {};
    'flowtype/no-weak-types': 'warn',

// TODO: enable flowtype/require-*-type rules once they're fixed (currently they run on non-annotated files too)
/*
    // Require all functions to have their params typed
    // Success: function (neat: string)
    // Error: function (neat)
    'flowtype/require-parameter-type': ['error', {
      annotateUndefined: 'never',
    }],

    // Require all functions to have a return type
    // Success: function (neat: string): string { return neat; }
    // Error: function (neat: string) { return neat; }
    'flowtype/require-return-type': ['error', 'always', {
      annotateUndefined: 'never',
    }],

    // Require variable declarations to be typed
    // Success: const id: string = 'cool-id';
    // Error: const id = 'cool-id';
    'flowtype/require-variable-type': ['error', {
      excludeVariableTypes: {
        var: true,
        let: true,
        const: false,
      },
    }],
*/

    // This rule can optionally report missing or missed placed annotations, common typos (e.g. floww)
    // and enforce a consistant annotation style.
    'flowtype/require-valid-file-annotation': ['error', 'never', {
      annotationStyle: 'line',
    }],

    // Make all types require a semicolon
    // Success: type Cool = {};
    // Error: type Cool = {}
    'flowtype/semi': ['error', 'always'],

    // Make all types have to have to look like "Type"
    'flowtype/type-id-match': ['error', '^([A-Z][a-z0-9]*)+$'],

    // Workaround so that we can declare flow type annotations first in classes
    'react/sort-comp': ['error', {
      order: [
        'type-annotations', // Flow type annotations
        'static-methods',
        'lifecycle',
        '/^on.+$/',
        '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
        'everything-else',
        '/^render.+$/',
        'render',
      ],
    }],
  },
};
